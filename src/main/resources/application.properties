spring.application.name=STBackend
spring.profiles.include=oauth

# cors
spring.web.cors.enabled=false

# ?????? ??
spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.url=jdbc:h2:file:~/data/db;DB_CLOSE_ON_EXIT=FALSE;AUTO_RECONNECT=TRUE
spring.datasource.url=jdbc:postgresql://localhost:5432/HumanResource

#spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.username=postgres
#spring.datasource.username=sa
spring.datasource.password=postgres
#spring.datasource.password=

spring.datasource.hikari.maximum-pool-size=5


# JPA ??
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect


server.address=0.0.0.0
server.port=8080

logging.level.org.springframework.security=DEBUG

jwt.secret=c39266596a61c9ce51f44fa4d5c5b02bc40c3a06e0acfceb82819a32611a04de

# OAuth2 Client ??
spring.security.oauth2.client.registration.google.client-id=your-google-client-id
spring.security.oauth2.client.registration.google.client-secret=your-google-client-secret
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code

# Enable CORS for the given path pattern (example)
spring.mvc.cors.allowed-origins=http://localhost:5173
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE
spring.mvc.cors.allowed-headers=*

# Gemini
gemini.baseurl=https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=
gemini.api.key=AIzaSyDzVoAYaKgHJl0-gnTXAIIjZK3A53rq_Ss
gemini.model=gemini-1.5-flash